
bootloader_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000214  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  00007214  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000082  008000e0  008000e0  00000328  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007cc  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000618  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039b  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034e  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001fc  00000000  00000000  0000192a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001b26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 2a 38 	jmp	0x7054	; 0x7054 <__ctors_end>
    7004:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7008:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    700c:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7010:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7014:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7018:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    701c:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7020:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7024:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7028:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    702c:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7030:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7034:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7038:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    703c:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7040:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7044:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7048:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    704c:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7050:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>

00007054 <__ctors_end>:
    7054:	11 24       	eor	r1, r1
    7056:	1f be       	out	0x3f, r1	; 63
    7058:	cf e5       	ldi	r28, 0x5F	; 95
    705a:	d8 e0       	ldi	r29, 0x08	; 8
    705c:	de bf       	out	0x3e, r29	; 62
    705e:	cd bf       	out	0x3d, r28	; 61

00007060 <__do_copy_data>:
    7060:	10 e0       	ldi	r17, 0x00	; 0
    7062:	a0 e6       	ldi	r26, 0x60	; 96
    7064:	b0 e0       	ldi	r27, 0x00	; 0
    7066:	e4 e1       	ldi	r30, 0x14	; 20
    7068:	f2 e7       	ldi	r31, 0x72	; 114
    706a:	02 c0       	rjmp	.+4      	; 0x7070 <__do_copy_data+0x10>
    706c:	05 90       	lpm	r0, Z+
    706e:	0d 92       	st	X+, r0
    7070:	a0 3e       	cpi	r26, 0xE0	; 224
    7072:	b1 07       	cpc	r27, r17
    7074:	d9 f7       	brne	.-10     	; 0x706c <__do_copy_data+0xc>

00007076 <__do_clear_bss>:
    7076:	21 e0       	ldi	r18, 0x01	; 1
    7078:	a0 ee       	ldi	r26, 0xE0	; 224
    707a:	b0 e0       	ldi	r27, 0x00	; 0
    707c:	01 c0       	rjmp	.+2      	; 0x7080 <.do_clear_bss_start>

0000707e <.do_clear_bss_loop>:
    707e:	1d 92       	st	X+, r1

00007080 <.do_clear_bss_start>:
    7080:	a2 36       	cpi	r26, 0x62	; 98
    7082:	b2 07       	cpc	r27, r18
    7084:	e1 f7       	brne	.-8      	; 0x707e <.do_clear_bss_loop>
    7086:	0e 94 49 38 	call	0x7092	; 0x7092 <main>
    708a:	0c 94 08 39 	jmp	0x7210	; 0x7210 <_exit>

0000708e <__bad_interrupt>:
    708e:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>

00007092 <main>:
uint8_t integ  ; //0>>255 page numbers
uint8_t remain ; //0>>128 remain bytes 
uint8_t buf[PAGESIZE]; // buffer to be transmited to flash

int main(void)
{
    7092:	ef 92       	push	r14
    7094:	ff 92       	push	r15
    7096:	0f 93       	push	r16
    7098:	1f 93       	push	r17
    709a:	cf 93       	push	r28
    709c:	df 93       	push	r29
	uint16 i;
	remain=APP_SIZE-(PAGESIZE*integ);
    709e:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <__data_end>
    70a2:	89 2f       	mov	r24, r25
    70a4:	87 95       	ror	r24
    70a6:	88 27       	eor	r24, r24
    70a8:	87 95       	ror	r24
    70aa:	8e 56       	subi	r24, 0x6E	; 110
    70ac:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <remain>
	if(integ)
	{
		for(i = 0 ; i< integ ; i++ )
    70b0:	99 23       	and	r25, r25
    70b2:	29 f1       	breq	.+74     	; 0x70fe <main+0x6c>
    70b4:	0f 2e       	mov	r0, r31
    70b6:	f0 e6       	ldi	r31, 0x60	; 96
    70b8:	ef 2e       	mov	r14, r31
    70ba:	f0 e0       	ldi	r31, 0x00	; 0
    70bc:	ff 2e       	mov	r15, r31
    70be:	f0 2d       	mov	r31, r0
    70c0:	00 e0       	ldi	r16, 0x00	; 0
    70c2:	10 e0       	ldi	r17, 0x00	; 0
    70c4:	c0 e0       	ldi	r28, 0x00	; 0
    70c6:	d0 e0       	ldi	r29, 0x00	; 0
		{
			memcpy(buf,(App_program+(i*128)),PAGESIZE);
    70c8:	80 e8       	ldi	r24, 0x80	; 128
    70ca:	f7 01       	movw	r30, r14
    70cc:	a2 ee       	ldi	r26, 0xE2	; 226
    70ce:	b0 e0       	ldi	r27, 0x00	; 0
    70d0:	01 90       	ld	r0, Z+
    70d2:	0d 92       	st	X+, r0
    70d4:	8a 95       	dec	r24
    70d6:	e1 f7       	brne	.-8      	; 0x70d0 <main+0x3e>
			boot_program_page(START_ADD + (i*128) ,buf);
    70d8:	b8 01       	movw	r22, r16
    70da:	80 e0       	ldi	r24, 0x00	; 0
    70dc:	90 e0       	ldi	r25, 0x00	; 0
    70de:	42 ee       	ldi	r20, 0xE2	; 226
    70e0:	50 e0       	ldi	r21, 0x00	; 0
    70e2:	0e 94 b2 38 	call	0x7164	; 0x7164 <boot_program_page>
{
	uint16 i;
	remain=APP_SIZE-(PAGESIZE*integ);
	if(integ)
	{
		for(i = 0 ; i< integ ; i++ )
    70e6:	21 96       	adiw	r28, 0x01	; 1
    70e8:	80 e8       	ldi	r24, 0x80	; 128
    70ea:	e8 0e       	add	r14, r24
    70ec:	f1 1c       	adc	r15, r1
    70ee:	00 58       	subi	r16, 0x80	; 128
    70f0:	1f 4f       	sbci	r17, 0xFF	; 255
    70f2:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
    70f6:	90 e0       	ldi	r25, 0x00	; 0
    70f8:	c8 17       	cp	r28, r24
    70fa:	d9 07       	cpc	r29, r25
    70fc:	28 f3       	brcs	.-54     	; 0x70c8 <main+0x36>
		{
			memcpy(buf,(App_program+(i*128)),PAGESIZE);
			boot_program_page(START_ADD + (i*128) ,buf);
		}
	}
	if(remain)
    70fe:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <remain>
    7102:	cc 23       	and	r28, r28
    7104:	f9 f0       	breq	.+62     	; 0x7144 <main+0xb2>
	{
		memset(buf , 0xFF , SPM_PAGESIZE) ; // As the remaining bytes are less than PAGE_SIZE
    7106:	40 e8       	ldi	r20, 0x80	; 128
    7108:	50 e0       	ldi	r21, 0x00	; 0
    710a:	6f ef       	ldi	r22, 0xFF	; 255
    710c:	70 e0       	ldi	r23, 0x00	; 0
    710e:	82 ee       	ldi	r24, 0xE2	; 226
    7110:	90 e0       	ldi	r25, 0x00	; 0
    7112:	0e 94 01 39 	call	0x7202	; 0x7202 <memset>
		memcpy(buf,(App_program+(integ*128)),remain);
    7116:	60 91 e0 00 	lds	r22, 0x00E0	; 0x8000e0 <__data_end>
    711a:	e0 e8       	ldi	r30, 0x80	; 128
    711c:	6e 9f       	mul	r22, r30
    711e:	80 01       	movw	r16, r0
    7120:	11 24       	eor	r1, r1
    7122:	4c 2f       	mov	r20, r28
    7124:	50 e0       	ldi	r21, 0x00	; 0
    7126:	b8 01       	movw	r22, r16
    7128:	60 5a       	subi	r22, 0xA0	; 160
    712a:	7f 4f       	sbci	r23, 0xFF	; 255
    712c:	82 ee       	ldi	r24, 0xE2	; 226
    712e:	90 e0       	ldi	r25, 0x00	; 0
    7130:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <memcpy>
		boot_program_page(START_ADD + (integ*128) , buf) ;
    7134:	b8 01       	movw	r22, r16
    7136:	11 0f       	add	r17, r17
    7138:	88 0b       	sbc	r24, r24
    713a:	99 0b       	sbc	r25, r25
    713c:	42 ee       	ldi	r20, 0xE2	; 226
    713e:	50 e0       	ldi	r21, 0x00	; 0
    7140:	0e 94 b2 38 	call	0x7164	; 0x7164 <boot_program_page>
	}
	
	boot_rww_enable ();
    7144:	81 e1       	ldi	r24, 0x11	; 17
    7146:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    714a:	e8 95       	spm
	((void (*)(void)) START_ADD)() ;  // call the first addrass 
    714c:	e0 e0       	ldi	r30, 0x00	; 0
    714e:	f0 e0       	ldi	r31, 0x00	; 0
    7150:	09 95       	icall
}
    7152:	80 e0       	ldi	r24, 0x00	; 0
    7154:	90 e0       	ldi	r25, 0x00	; 0
    7156:	df 91       	pop	r29
    7158:	cf 91       	pop	r28
    715a:	1f 91       	pop	r17
    715c:	0f 91       	pop	r16
    715e:	ff 90       	pop	r15
    7160:	ef 90       	pop	r14
    7162:	08 95       	ret

00007164 <boot_program_page>:
#include <avr/boot.h>
#include <avr/interrupt.h>


void boot_program_page (uint32_t page, uint8_t *buf)
{
    7164:	cf 92       	push	r12
    7166:	df 92       	push	r13
    7168:	ef 92       	push	r14
    716a:	ff 92       	push	r15
    716c:	cf 93       	push	r28
    716e:	df 93       	push	r29
    7170:	6b 01       	movw	r12, r22
    7172:	7c 01       	movw	r14, r24
	uint16_t i;
	uint8_t sreg;
	uint16_t w;
	sreg = SREG ;
    7174:	6f b7       	in	r22, 0x3f	; 63
	// enter Critical section
	cli();
    7176:	f8 94       	cli

	boot_page_erase (page);
    7178:	c6 01       	movw	r24, r12
    717a:	23 e0       	ldi	r18, 0x03	; 3
    717c:	f6 01       	movw	r30, r12
    717e:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7182:	e8 95       	spm
	boot_spm_busy_wait ();      // Wait until the memory is erased.
    7184:	07 b6       	in	r0, 0x37	; 55
    7186:	00 fc       	sbrc	r0, 0
    7188:	fd cf       	rjmp	.-6      	; 0x7184 <boot_program_page+0x20>
    718a:	ea 01       	movw	r28, r20
    718c:	c0 58       	subi	r28, 0x80	; 128
    718e:	df 4f       	sbci	r29, 0xFF	; 255
    7190:	da 01       	movw	r26, r20
		// Set up little-endian word.

		w = *buf++;			// first byte
		w += (*buf++) << 8; // second byte

		boot_page_fill (page + i, w); //
    7192:	31 e0       	ldi	r19, 0x01	; 1
    7194:	fc 01       	movw	r30, r24
    7196:	e4 1b       	sub	r30, r20
    7198:	f5 0b       	sbc	r31, r21
    719a:	af 01       	movw	r20, r30

	for (i=0; i<SPM_PAGESIZE; i+=2)
	{
		// Set up little-endian word.

		w = *buf++;			// first byte
    719c:	2c 91       	ld	r18, X
		w += (*buf++) << 8; // second byte

		boot_page_fill (page + i, w); //
    719e:	fa 01       	movw	r30, r20
    71a0:	ea 0f       	add	r30, r26
    71a2:	fb 1f       	adc	r31, r27
    71a4:	11 96       	adiw	r26, 0x01	; 1
    71a6:	8c 91       	ld	r24, X
    71a8:	11 97       	sbiw	r26, 0x01	; 1
    71aa:	90 e0       	ldi	r25, 0x00	; 0
    71ac:	98 2f       	mov	r25, r24
    71ae:	88 27       	eor	r24, r24
    71b0:	82 0f       	add	r24, r18
    71b2:	91 1d       	adc	r25, r1
    71b4:	0c 01       	movw	r0, r24
    71b6:	30 93 57 00 	sts	0x0057, r19	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    71ba:	e8 95       	spm
    71bc:	11 24       	eor	r1, r1
    71be:	12 96       	adiw	r26, 0x02	; 2
	cli();

	boot_page_erase (page);
	boot_spm_busy_wait ();      // Wait until the memory is erased.

	for (i=0; i<SPM_PAGESIZE; i+=2)
    71c0:	ac 17       	cp	r26, r28
    71c2:	bd 07       	cpc	r27, r29
    71c4:	59 f7       	brne	.-42     	; 0x719c <boot_program_page+0x38>
		w += (*buf++) << 8; // second byte

		boot_page_fill (page + i, w); //
	}

	boot_page_write (page);     // Store buffer in flash page.
    71c6:	85 e0       	ldi	r24, 0x05	; 5
    71c8:	f6 01       	movw	r30, r12
    71ca:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    71ce:	e8 95       	spm
	boot_spm_busy_wait();       // Wait until the memory is written.
    71d0:	07 b6       	in	r0, 0x37	; 55
    71d2:	00 fc       	sbrc	r0, 0
    71d4:	fd cf       	rjmp	.-6      	; 0x71d0 <boot_program_page+0x6c>

	// Reenable RWW-section again. We need this if we want to jump back
	// to the application after bootloading.

	boot_rww_enable ();
    71d6:	81 e1       	ldi	r24, 0x11	; 17
    71d8:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    71dc:	e8 95       	spm

	// Re-enable interrupts (if they were ever enabled).

	SREG = sreg;
    71de:	6f bf       	out	0x3f, r22	; 63
	sei();
    71e0:	78 94       	sei
}
    71e2:	df 91       	pop	r29
    71e4:	cf 91       	pop	r28
    71e6:	ff 90       	pop	r15
    71e8:	ef 90       	pop	r14
    71ea:	df 90       	pop	r13
    71ec:	cf 90       	pop	r12
    71ee:	08 95       	ret

000071f0 <memcpy>:
    71f0:	fb 01       	movw	r30, r22
    71f2:	dc 01       	movw	r26, r24
    71f4:	02 c0       	rjmp	.+4      	; 0x71fa <memcpy+0xa>
    71f6:	01 90       	ld	r0, Z+
    71f8:	0d 92       	st	X+, r0
    71fa:	41 50       	subi	r20, 0x01	; 1
    71fc:	50 40       	sbci	r21, 0x00	; 0
    71fe:	d8 f7       	brcc	.-10     	; 0x71f6 <memcpy+0x6>
    7200:	08 95       	ret

00007202 <memset>:
    7202:	dc 01       	movw	r26, r24
    7204:	01 c0       	rjmp	.+2      	; 0x7208 <memset+0x6>
    7206:	6d 93       	st	X+, r22
    7208:	41 50       	subi	r20, 0x01	; 1
    720a:	50 40       	sbci	r21, 0x00	; 0
    720c:	e0 f7       	brcc	.-8      	; 0x7206 <memset+0x4>
    720e:	08 95       	ret

00007210 <_exit>:
    7210:	f8 94       	cli

00007212 <__stop_program>:
    7212:	ff cf       	rjmp	.-2      	; 0x7212 <__stop_program>
